{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useMemo } from 'react';\nconst useProducts = () => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortBy, setSortBy] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedColors, setSelectedColors] = useState([]);\n  useEffect(() => {\n    fetchProducts();\n  }, []);\n  const fetchProducts = async () => {\n    try {\n      const response = await fetch('https://render-user-page.onrender.com/api/products');\n      if (!response.ok) throw new Error('Failed to fetch products');\n      const data = await response.json();\n      setProducts(data);\n      setLoading(false);\n    } catch (err) {\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n  const isProductNew = createdAt => {\n    if (!createdAt || createdAt === '' || createdAt === null) return false;\n    try {\n      const productDate = new Date(createdAt);\n      if (isNaN(productDate.getTime())) return false;\n      const now = new Date();\n      const diffTime = Math.abs(now - productDate);\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      return diffDays <= 6;\n    } catch (error) {\n      return false;\n    }\n  };\n\n  // Extract color from product name\n  const extractColorFromName = name => {\n    if (!name) return null;\n\n    // Remove the prefix like \"30(s)\" or \"2/20(s)\" and \"Yarn\" suffix\n    let colorPart = name.replace(/^\\d+(\\(\\w+\\)|\\/)?\\d*\\(\\w+\\)\\s*/, '').replace(/\\s*Yarn$/, '');\n\n    // Handle special notation with underscore\n    if (colorPart.includes('_')) {\n      // Convert underscore notation to proper color names\n      colorPart = colorPart.split('_').join(' ');\n    }\n\n    // Return the cleaned color part if it's not empty\n    return colorPart.trim() || null;\n  };\n  const availableColors = useMemo(() => {\n    console.log('Products data for color extraction:', products);\n\n    // Extract colors from product names\n    const colors = products.map(product => extractColorFromName(product.name)).filter(Boolean);\n    console.log('Extracted colors from names:', colors);\n\n    // If no colors extracted, provide default yarn colors\n    if (colors.length === 0) {\n      return ['Red', 'Blue', 'Green', 'Yellow', 'Purple', 'Pink', 'Orange', 'Brown', 'Black', 'White', 'Gray', 'Beige'];\n    }\n\n    // Return unique colors\n    return [...new Set(colors)];\n  }, [products]);\n  const filteredProducts = useMemo(() => {\n    let result = [...products];\n    result = result.map(product => ({\n      ...product,\n      isNew: product.createdAt ? isProductNew(product.createdAt) : false,\n      extractedColor: extractColorFromName(product.name)\n    }));\n    if (searchTerm) {\n      result = result.filter(product => product.name.toLowerCase().includes(searchTerm.toLowerCase()) || product.description.toLowerCase().includes(searchTerm.toLowerCase()));\n    }\n    if (selectedColors.length > 0) {\n      result = result.filter(product => {\n        const productName = product.name.toLowerCase();\n        // Check if any selected color appears in the product name\n        return selectedColors.some(color => productName.includes(color.toLowerCase()) || product.extractedColor && product.extractedColor.toLowerCase().includes(color.toLowerCase()));\n      });\n    }\n    result.sort((a, b) => {\n      if (a.isNew && !b.isNew) return -1;\n      if (!a.isNew && b.isNew) return 1;\n      switch (sortBy) {\n        case 'price-asc':\n          return a.price - b.price;\n        case 'price-desc':\n          return b.price - b.price;\n        case 'name-asc':\n          return a.name.localeCompare(b.name);\n        case 'name-desc':\n          return b.name.localeCompare(a.name);\n        default:\n          return 0;\n      }\n    });\n    return result;\n  }, [products, searchTerm, sortBy, selectedColors]);\n  return {\n    products: filteredProducts,\n    searchTerm,\n    setSearchTerm,\n    sortBy,\n    setSortBy,\n    loading,\n    error,\n    selectedColors,\n    setSelectedColors,\n    availableColors\n  };\n};\n_s(useProducts, \"U7hd/Yp/kWPt/2Ewv8ZcZiut+EQ=\");\nexport default useProducts;","map":{"version":3,"names":["useState","useEffect","useMemo","useProducts","_s","products","setProducts","searchTerm","setSearchTerm","sortBy","setSortBy","loading","setLoading","error","setError","selectedColors","setSelectedColors","fetchProducts","response","fetch","ok","Error","data","json","err","message","isProductNew","createdAt","productDate","Date","isNaN","getTime","now","diffTime","Math","abs","diffDays","ceil","extractColorFromName","name","colorPart","replace","includes","split","join","trim","availableColors","console","log","colors","map","product","filter","Boolean","length","Set","filteredProducts","result","isNew","extractedColor","toLowerCase","description","productName","some","color","sort","a","b","price","localeCompare"],"sources":["d:/ksp_devops/ksp_user_devops/frontend/src/hooks/useProducts.js"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\r\n\r\nconst useProducts = () => {\r\n  const [products, setProducts] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [sortBy, setSortBy] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedColors, setSelectedColors] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  const fetchProducts = async () => {\r\n    try {\r\n      const response = await fetch('https://render-user-page.onrender.com/api/products');\r\n      if (!response.ok) throw new Error('Failed to fetch products');\r\n      const data = await response.json();\r\n      setProducts(data);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const isProductNew = (createdAt) => {\r\n    if (!createdAt || createdAt === '' || createdAt === null) return false;\r\n    \r\n    try {\r\n      const productDate = new Date(createdAt);\r\n      if (isNaN(productDate.getTime())) return false;\r\n      \r\n      const now = new Date();\r\n      const diffTime = Math.abs(now - productDate);\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n      return diffDays <= 6;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Extract color from product name\r\n  const extractColorFromName = (name) => {\r\n    if (!name) return null;\r\n    \r\n    // Remove the prefix like \"30(s)\" or \"2/20(s)\" and \"Yarn\" suffix\r\n    let colorPart = name.replace(/^\\d+(\\(\\w+\\)|\\/)?\\d*\\(\\w+\\)\\s*/, '').replace(/\\s*Yarn$/, '');\r\n    \r\n    // Handle special notation with underscore\r\n    if (colorPart.includes('_')) {\r\n      // Convert underscore notation to proper color names\r\n      colorPart = colorPart.split('_').join(' ');\r\n    }\r\n    \r\n    // Return the cleaned color part if it's not empty\r\n    return colorPart.trim() || null;\r\n  };\r\n\r\n  const availableColors = useMemo(() => {\r\n    console.log('Products data for color extraction:', products);\r\n    \r\n    // Extract colors from product names\r\n    const colors = products\r\n      .map(product => extractColorFromName(product.name))\r\n      .filter(Boolean);\r\n    \r\n    console.log('Extracted colors from names:', colors);\r\n    \r\n    // If no colors extracted, provide default yarn colors\r\n    if (colors.length === 0) {\r\n      return [\r\n        'Red', 'Blue', 'Green', 'Yellow', 'Purple', \r\n        'Pink', 'Orange', 'Brown', 'Black', 'White', \r\n        'Gray', 'Beige'\r\n      ];\r\n    }\r\n    \r\n    // Return unique colors\r\n    return [...new Set(colors)];\r\n  }, [products]);\r\n\r\n  const filteredProducts = useMemo(() => {\r\n    let result = [...products];\r\n\r\n    result = result.map(product => ({\r\n      ...product,\r\n      isNew: product.createdAt ? isProductNew(product.createdAt) : false,\r\n      extractedColor: extractColorFromName(product.name)\r\n    }));\r\n\r\n    if (searchTerm) {\r\n      result = result.filter(\r\n        product =>\r\n          product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n          product.description.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (selectedColors.length > 0) {\r\n      result = result.filter(product => {\r\n        const productName = product.name.toLowerCase();\r\n        // Check if any selected color appears in the product name\r\n        return selectedColors.some(color => \r\n          productName.includes(color.toLowerCase()) ||\r\n          (product.extractedColor && product.extractedColor.toLowerCase().includes(color.toLowerCase()))\r\n        );\r\n      });\r\n    }\r\n\r\n    result.sort((a, b) => {\r\n      if (a.isNew && !b.isNew) return -1;\r\n      if (!a.isNew && b.isNew) return 1;\r\n\r\n      switch (sortBy) {\r\n        case 'price-asc':\r\n          return a.price - b.price;\r\n        case 'price-desc':\r\n          return b.price - b.price;\r\n        case 'name-asc':\r\n          return a.name.localeCompare(b.name);\r\n        case 'name-desc':\r\n          return b.name.localeCompare(a.name);\r\n        default:\r\n          return 0;\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }, [products, searchTerm, sortBy, selectedColors]);\r\n\r\n  return {\r\n    products: filteredProducts,\r\n    searchTerm,\r\n    setSearchTerm,\r\n    sortBy,\r\n    setSortBy,\r\n    loading,\r\n    error,\r\n    selectedColors,\r\n    setSelectedColors,\r\n    availableColors\r\n  };\r\n};\r\n\r\nexport default useProducts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}